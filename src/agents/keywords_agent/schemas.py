"""
For structured outputs we need to define the schema of the output. Define them here for keyword agent.
"""
from typing import Literal
from pydantic import BaseModel, Field

class Entities(BaseModel):
    """
    Represents the extracted entities from the user input.
    """
    entities: list[str] = Field(
        ...,
        description="List of 3 extracted entities from the user input.",
    )

class RouteToQueryOrAnalysis(BaseModel):
    """
    Represents the routing decision based on the tool response.
    """
    route: Literal["query_generator", "competitor_analysis"] = Field(
        ...,
        description="Routing decision: either 'query_generator' or 'competitor_analysis'.",
    )

class SearchQueries(BaseModel):
    """
    Represent the generated search queries based on the extracted entities and user input.
    """
    search_queries: list[str] = Field(
        ...,
        description= "List of 2 generated search queries based on the extracted entities and user input.",
    )

class WebSearchResult(BaseModel):
    """
    Represents a single web search result.
    """
    rank: int = Field(
        ...,
        description="Rank of the search result based on relevance and quality of competition. 1 is the highest rank",
    )
    url: str = Field(
        ...,
        description="URL of the web page",
    )
    title: str = Field(
        ...,
        description="Title of the web page",
    )
    published_date: str = Field(
        ...,
        description="Published date of the web page",
    )
    highlights: str = Field(
        ...,
        description="Highlights of text content from the web page",
    )

class CompetitorAnalysisOutputModel(BaseModel):
    """
    Represents the output of the competitor analysis model.
    """
    search_queries: list[str] = Field(
        ...,
        description="List of top 2 search queries that gave the best web search results.",
    )
    web_search_results: list[WebSearchResult] = Field(
        ...,
        description="List of top 5 web search results obtained from the competitor analysis.",
    )
    competitive_analysis: str = Field(
        ...,
        description="The competitive analysis paragraphs generated by the model.",
    )

class MasterlistAndPrimarySecondaryKeywords(BaseModel):
    """
    Represents the output of the masterlist and primary/secondary keywords agent.
    """
    keyword_masterlist: list[dict[str, str]] = Field(
        ...,
        description=f"List of keyword objects, each object has text, monthly_search_volume, competition, competition_index, rank. Here rank represents the rank of the keyword in the masterlist. The list is sorted in descending order based on monthly_search_volume.",
    )
    primary_keywords: list[dict[str, str]] = Field(
        ...,
        description="List of 2-3 primary keywords from the masterlist. List of objects, each object has key=keyword, value=reasoning. reasoning is a paragraph explaining quantitatively and qualitatively why this keyword is ideal for SEO based on all the information you have.",
    )
    secondary_keywords: list[dict[str, str]] = Field(
        ...,
        description="List of 3-5 secondary keywords with their respective reasoning. Each object has key=keyword, value=reasoning. reasoning is a paragraph explaining quantitatively and qualitatively why this keyword is ideal for SEO based on all the information you have.",
    )