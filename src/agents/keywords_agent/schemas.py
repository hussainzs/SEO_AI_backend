"""
For structured outputs we need to define the schema of the output. Define them here for keyword agent.
"""
from typing import Literal
from pydantic import BaseModel, Field

# we are defining a class that every other class will inherit from. This is done to meet OpenAI's allowed input schemas. 
# Specifically, we need to have "additionalProperties": false for each class and each key should be required. 
class BaseStructuredModel(BaseModel):
    class Config:
        """
        Configuration for the Pydantic model.
        """
        # this will set "additionalProperties" to false for each class when this pydantic model is converted to json and meet OpenAI's requirement
        extra = "forbid"

class Entities(BaseStructuredModel):
    """
    Represents the extracted entities from the user input.
    """
    entities: list[str] = Field(
        ...,
        description="List of 3 extracted entities from the user input.",
    )

class RouteToQueryOrAnalysis(BaseStructuredModel):
    """
    Represents the routing decision based on the tool response.
    """
    route: Literal["query_generator", "competitor_analysis"] = Field(
        ...,
        description="Routing decision: either 'query_generator' or 'competitor_analysis'.",
    )

class SearchQueries(BaseStructuredModel):
    """
    Represent the generated search queries based on the extracted entities and user input.
    """
    search_queries: list[str] = Field(
        ...,
        description= "List of 2 generated search queries based on the extracted entities and user input.",
    )

class WebSearchResult(BaseStructuredModel):
    """
    Represents a single web search result.
    """
    rank: int = Field(
        ...,
        description="Rank of the search result based on relevance and quality of competition. 1 is the highest rank",
    )
    url: str = Field(
        ...,
        description="URL of the web page",
    )
    title: str = Field(
        ...,
        description="Title of the web page",
    )
    published_date: str = Field(
        ...,
        description="Published date of the web page",
    )
    highlights: str = Field(
        ...,
        description="Highlights of text content from the web page",
    )

class CompetitorAnalysisOutputModel(BaseStructuredModel):
    """
    Represents the output of the competitor analysis model.
    """
    search_queries: list[str] = Field(
        ...,
        description="List of top 2 search queries that gave the best web search results.",
    )
    web_search_results: list[WebSearchResult] = Field(
        ...,
        description="List of top 5 web search results obtained from the competitor analysis.",
    )
    competitive_analysis: str = Field(
        ...,
        description="The competitive analysis paragraphs generated by the model.",
    )
# classes for masterlist and primary/secondary keywords to use 
# Define structured keyword objects for better type safety
class KeywordMasterlistItem(BaseStructuredModel):
    """
    Represents a single keyword in the masterlist with all its properties.
    """
    text: str = Field(
        ...,
        description="The keyword text",
    )
    monthly_search_volume: str = Field(
        ...,
        description="Monthly search volume for this keyword",
    )
    competition: str = Field(
        ...,
        description="Competition level for this keyword",
    )
    competition_index: str = Field(
        ...,
        description="Numerical competition index",
    )
    rank: str = Field(
        ...,
        description="Rank of the keyword in the masterlist",
    )

class KeywordWithReasoning(BaseStructuredModel):
    """
    Represents a keyword with its reasoning for selection.
    """
    keyword: str = Field(
        ...,
        description="The keyword text",
    )
    reasoning: str = Field(
        ...,
        description="Paragraph explaining quantitatively and qualitatively why this keyword is ideal for SEO based on all the information available",
    )
    
class MasterlistAndPrimarySecondaryKeywords(BaseStructuredModel):
    """
    Represents the output of the masterlist and primary/secondary keywords agent.
    """
    keyword_masterlist: list[KeywordMasterlistItem] = Field(
        ...,
        description="List of keyword objects, each object has text, monthly_search_volume, competition, competition_index, rank. The list is sorted in descending order based on monthly_search_volume.",
    )
    primary_keywords: list[KeywordWithReasoning] = Field(
        ...,
        description="List of 2-3 primary keywords from the masterlist with their reasoning.",
    )
    secondary_keywords: list[KeywordWithReasoning] = Field(
        ...,
        description="List of 3-5 secondary keywords with their respective reasoning.",
    )

class SuggestionGeneratorModel(BaseStructuredModel):
    """
    Generated suggestions related to url slug, article titles, and revised sentences with keywords inserted in it
    
    """
    suggested_url_slug: str = Field(
        ...,
        description = "Keyword-rich url slug"
    )

    suggested_article_headlines: list[str] = Field(
        ...,
        description = "List of 2 SEO-optimized keyword-rich article titles optimized for Click-Through Rate (CTR)"
    )

    final_suggestions: str = Field(
        ...,
        description = "Revised sentences with incorporation of primary & secondary keywords"
    )
